class CfgSkeletons
{
	class Default
	{
		isDiscrete = 1;
		skeletonInherit = "";
		skeletonBones[] = {};
	};

	class metro_skeleton: Default
	{
		skeletonBones[]=
		{
			"damageHide","",
			
			"Door_1","",
			"Door_2","",
			
			"wheel1","",
			"wheel2","",
			"wheel3","",
			"wheel4","",
			"wheel5","",
			"wheel6","",
			"wheel7","",
			"wheel8",""
		};
	};
};

class CfgModels
{
	class Default
	{
		sectionsInherit = "";
		sections[] = {};
		skeletonName = "";
	};
	class metro: Default
	{
		htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 180;	// Maximum half-cooling time (in seconds)
		afMax = 100;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 8;		// Maximum temperature when the model is moving (in celsius)
		mFact = 1;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 150;	// Metabolism temperature of the model (in celsius)
		
		skeletonName="metro_skeleton";
		sections[]=
		{
			"damage",
			"camo",
			"light1_pos",
			"light2_pos",
			"light3_pos",
			"light4_pos"
		};
		class Animations
		{
			// destruct START
			class damageHide
			{
				type="hide";
				source="damage";
				selection="damageHide";
				hideValue=1.0;
			};
			// Doors Animation START
			class Door_1_rot
			{
					type			= translation;
					source			= Door_1_source; // Controler defined in class AnimationSources in config.cpp.
					selection		= Door_1; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
					axis			= Door_1_axis; // Axis of the rotation.
					memory			= 1;
					minValue		= 0; // Value of the controller at which the rotation will be angle0
					maxValue		= 1; // Value of the controller at which the rotation will be angle1
					offset0			= 0;	//this animation starts relative to the position of the first memory point
					offset1			= 1;	//this animation ends relative to the position of the second memory point (if the mem points are 1m apart, the animation moves 1m)
			};
			class Door_2_rot
			{
					type			= translation;
					source			= Door_2_source; // Controler defined in class AnimationSources in config.cpp.
					selection		= Door_2; // Selection from p3d that also has to be defined as a bone in this model`s skeleton.
					axis			= Door_2_axis; // Axis of the rotation.
					memory			= 1;
					minValue		= 0; // Value of the controller at which the rotation will be angle0
					maxValue		= 1; // Value of the controller at which the rotation will be angle1
					offset0			= 0;	//this animation starts relative to the position of the first memory point
					offset1			= 1;	//this animation ends relative to the position of the second memory point (if the mem points are 1m apart, the animation moves 1m)
			};
			
			//Wheels START
			class Wheel1
			{
				type="rotationX";
				source="Wheels_source";
				selection="wheel1";
				axis="axel1";
				memory=1;
				sourceAddress="loop";
				minValue=0;
				maxValue=1;
				angle0=0;
				angle1="rad -360";
			};
			class Wheel2: Wheel1
			{
				selection="wheel2";
				axis="axel2";
			};
			class Wheel3: Wheel1
			{
				selection="wheel3";
				axis="axel3";
			};
			class Wheel4: Wheel1
			{
				selection="wheel4";
				axis="axel4";
			};
			class Wheel5: Wheel1
			{
				selection="wheel5";
				axis="axel5";
			};
			class Wheel6: Wheel1
			{
				selection="wheel6";
				axis="axel6";
			};
			class Wheel7: Wheel1
			{
				selection="wheel7";
				axis="axel7";
			};
			class Wheel8: Wheel1
			{
				selection="wheel8";
				axis="axel8";
			};
			//Wheels END
		};
	};

};